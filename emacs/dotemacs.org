* About

Originally based on [[https://github.com/rememberYou/.emacs.d/blob/master/config.org][config.org by rememberYou]].

* Installation
** Icons
** Libraries
#+BEGIN_SRC bash
$ sudo aptitude install libpng-dev zlib1g-dev
$ sudo aptitude install libpoppler-glib-dev
$ sudo aptitude install libpoppler-private-dev
#+END_SRC

* Initialization
** Package Sources

#+begin_src emacs-lisp :tangle yes
  (setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
                           ("melpa" . "https://melpa.org/packages/")
                           ("org" . "http://orgmode.org/elpa/")))
#+end_src

** use-package
#+BEGIN_SRC emacs-lisp :tangle yes
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (use-package gnu-elpa-keyring-update :ensure t)
  (use-package delight :ensure t)
  (use-package use-package-ensure-system-package :ensure t)
#+END_SRC
** Byte Compile

Request an async byte-compile of the user-emacs-directory.

#+BEGIN_SRC emacs-lisp :tangle yes
(async-byte-recompile-directory user-emacs-directory)
#+END_SRC
* Configuration
** Better Defaults

#+BEGIN_SRC emacs-lisp :tangle yes
  (setq-default
   cursor-in-non-selected-windows t            ; hide the cursor in inactive windows
   fill-column 80                              ; set width for line breaks
   indent-tabs-mode nil                        ; prefer spaces over tabs
   inhibit-startup-screen t                    ; disable start-up screen
   initial-scratch-message ""                  ; empty the initial *scratch* buffer
   kill-ring-max 128                           ; max length of kill ring
   load-prefer-newer t                         ; prefer newest version of a file
   mark-ring-max 128                           ; max length of mark ring
   scroll-conservatively most-positive-fixnum  ; always scroll by one line
   select-enable-clipboard t                   ; merge system and emacs clipboard
   tab-width 4                                 ; set width for tabs
   use-package-always-ensure t                 ; avoid the :ensure keyword for package
   view-read-only t)                           ; open read-only buffers in view-mode
  (cd "~/")                                    ; move to user directory
  (column-number-mode 1)                       ; display column number
  (display-time-mode 1)                        ; display current time
  (fset 'yes-or-no-p 'y-or-n-p)                ; replace yes/no prompt with y/n
  (global-hl-line-mode)                        ; highlight current line
  (set-default-coding-systems 'utf-8)          ; default to utf-8 encoding
  (show-paren-mode 1)                          ; show the parent
#+END_SRC

** Customization

Avoid writing to =init.el=, by adding to a separate file.

#+BEGIN_SRC emacs-lisp :tangle yes
  (setq-default
   custom-file (expand-file-name "custom.el" user-emacs-directory))
  (when (file-exists-p custom-file)
    (load custom-file t))
#+END_SRC

** Fonts

#+BEGIN_SRC emacs-lisp :tangle yes
(set-face-attribute 'default nil :font "Inconsolata")
(set-fontset-font t 'latin "Noto Sans")
#+END_SRC

** Buffers
*** Kill Buffer
Don't ask before killing a buffer.
#+begin_src emacs-lisp :tangle yes
  (global-set-key [remap kill-buffer] #'kill-this-buffer)
#+end_src
*** Protect Buffers
#+begin_src emacs-lisp :tangle yes
  (defvar *protected-buffers* '("*scratch*" "*Messages*")
    "Buffers that cannot be killed.")

  (defun my/protected-buffers ()
    "Protects some buffers from being killed."
    (dolist (buffer *protected-buffers*)
      (with-current-buffer buffer
        (emacs-lock-mode 'kill))))

  (add-hook 'after-init-hook #'my/protected-buffers)
#+end_src
** Language Server Protocol (LSP)

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package lsp-mode
	       :hook ((c-mode c++-mode java-mode scala-mode) . lsp)
	       :custom
	       (lsp-prefer-flymake nil)
	       (lsp-session-file (expand-file-name "lsp-session-v1" user-emacs-directory)))
  (use-package lsp-ui)
  (use-package company-lsp)

  (use-package dap-mode
	       :after lsp-mode
	       :config
	       (dap-mode t)
	       (dap-ui-mode t))
#+END_SRC

** Goto Beginning of Line
http://emacsredux.com/blog/2013/05/22/smarter-navigation-to-the-beginning-of-a-line/

#+begin_src emacs-lisp :tangle yes
  (defun my/smarter-move-beginning-of-line (arg)
    "Moves point back to indentation of beginning of line.

     Move point to the first non-whitespace character on this line.
     If point is already there, move to the beginning of the line.
     Effectively toggle between the first non-whitespace character and
     the beginning of the line.

     If ARG is not nil or 1, move forward ARG - 1 lines first. If
     point reaches the beginning or end of the buffer, stop there."
    (interactive "^p")
    (setq arg (or arg 1))

    ;; Move lines first
    (when (/= arg 1)
      (let ((line-move-visual nil))
        (forward-line (1- arg))))

    (let ((orig-point (point)))
      (back-to-indentation)
      (when (= orig-point (point))
        (move-beginning-of-line 1))))

  (global-set-key (kbd "C-a") 'my/smarter-move-beginning-of-line)
#+end_src

** Icons

Icons for ~doom-modeline~, ~switch-to-buffer~, ~counsel-find-file~ and
many others. If it's the first time that you install the package, run
~M-x all-the-icons-install-fonts~.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package all-the-icons :defer 0.y)
#+END_SRC

** Parenthesis highlighting
#+begin_src emacs-lisp :tangle yes
  (use-package faces
    :ensure nil
    :custom (show-paren-delay 0)
    :config
    (set-face-background 'show-paren-match "#262b36")
    (set-face-bold 'show-paren-match t)
    (set-face-foreground 'show-paren-match "#ffffff"))
#+end_src
** Theme

*NOTE*: To be able to see the icons, install [[][all-the-icons]]

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package doom-themes
	       :config (load-theme 'doom-nord t))
  (use-package doom-modeline
	       :defer 0.1
	       :config (doom-modeline-mode))
  (use-package solaire-mode
	       :custom (solaire-mode-remap-fringe t)
	       :config
	       (solaire-mode-swap-bg)
	       (solaire-global-mode +1))
#+END_SRC

** Turn off UI

#+BEGIN_SRC emacs-lisp :tangle yes
  (when window-system
    ; (menu-bar-mode -1)    ; disable the menu bar
    ; (scroll-bar-mode -1)  ; disable the scroll bar
    (tool-bar-mode -1)      ; disable the tool bar
    (tooltip-mode -1))      ; disable tooltips
#+END_SRC
** Windows

Most of the time, when I open a new window with ~C-x 2~ or ~C-x 3~ it is to
switch directly to it and perform an action. By default, GNU Emacs does not give
focus to the new window created. I have no idea why this is not the default
behavior. But let’s refine these keys:

#+begin_src emacs-lisp :tangle yes
  (use-package window
    :ensure nil
    :bind (("C-x 3" . hsplit-last-buffer)
           ("C-x 2" . vsplit-last-buffer))
    :preface
    (defun hsplit-last-buffer ()
      "Gives the focus to the last created horizontal window"
      (interactive)
      (split-window-horizontally)
      (other-window 1))

    (defun vsplit-last-buffer ()
      "Gives the focus to the last created vertical window"
      (interactive)
      (split-window-vertically)
      (other-window 1)))
#+end_src

*** Switch-Window

Displays an overlay in each window showing a unique key, then asks the user
where to move in the window.

Most people use ~ace-window~, but I prefer ~switch-window~ because I find this
package more ergonomic by using the fact of displaying the buffer number by
hiding its contents.

#+begin_src emacs-lisp :tangle yes
  (use-package switch-window
    :bind (("C-x o" . switch-window)
           ("C-x w" . switch-window-then-swap-buffer))
    :custom
    (switch-window-shortcut-style 'qwerty)
    (switch-window-threshold 2))

#+end_src

*** Windmove
Allows you to move from one window to another with something more natural than
cycling through ~C-x o~ (other-window).
#+begin_src emacs-lisp :tangle yes
  (use-package windmove
    :bind (("C-c h" . windmove-left)
           ("C-c j" . windmove-down)
           ("C-c k" . windmove-up)
           ("C-c l" . window-right)))
#+end_src

*** Winner

#+BEGIN_QUOTE
Winner mode is a global minor mode that records the changes in the window
configuration (i.e. how the frames are partitioned into windows) so that the
changes can be “undone” using the command winner-undo. By default, this one is
bound to the key sequence ctrl-c left. If you change your mind (while undoing),
you can press ctrl-c right (calling winner-redo).
#+END_QUOTE

#+begin_src emacs-lisp :tangle yes
  (use-package winner
    :defer 2
    :config (winner-mode 1))
#+end_src

** Whitespace
*** Delete Trailing Whitespace on save
#+begin_src emacs-lisp :tangle yes
  (use-package simple
    :ensure nil
    :hook (before-save . delete-trailing-whitespace))
#+end_src

*** Hungry Delete
#+begin_quote
Deleting a whitespace character will delete all whitespace until the next
non-whitespace character.
#+end_quote

#+begin_src emacs-lisp :tangle yes
  (use-package hungry-delete
    :defer 0.7
    :delight
    :config (global-hungry-delete-mode))
#+end_src

** Word Wrapping / Auto-Fill

#+begin_src emacs-lisp :tangle yes
  (use-package simple
    :ensure nil
    :delight (auto-fill-function)
    :bind ("C-x p" . pop-to-mark-command)
    :hook ((prog-mode . turn-on-auto-fill)
           (text-mode . turn-on-auto-fill))
    :custom (set-mark-command-repeat-pop t))
#+end_src

* Languages

** CSV

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package csv-mode)
#+END_SRC

** Emacs Lisp

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package elisp-mode :ensure nil :delight "ξ ")
#+END_SRC

*** Eldoc

Provides minibuffer hints when working with Emacs Lisp.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package eldoc
    :delight
    :hook (emacs-lisp-mode . eldoc-mode))
#+END_SRC

** LaTeX

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package tex
	       :ensure auctex
	       :bind (:map TeX-mode-map
			   ("C-c C-o" . TeX-recenter-output-buffer)
			   ("C-c C-l" . TeX-next-error)
			   ("M-[" . outline-previous-heading)
			   ("M-]" . outline-next-heading))
	       :hook (LaTeX-mode . reftex-mode)
	       :preface
	       (defun my/switch-to-help (&optional ARG REPARSE)
		 "Switches to the *TeX Help* buffer after compilation."
		 (other-window 1))
	       :custom
	       (TeX-auto-save t)
	       (TeX-byte-compile t)
	       (TeX-clean-confirm nil)
	       (TeX-master 'dwim)
	       (TeX-parse-self t)
	       (TeX-PDF-mode t)
	       (TeX-source-correlate-mode t)
	       (TeX-view-program-selection '((output-df "PDF Tools")))
	       :config
	       (advice-add 'TeX-next-error :after #'my/switch-to-help-window)
	       (advice-add 'TeX-recenter-output-buffer :after #'my/switch-to-help-window)
	       ;; the ":hook" doesn't work for this one...
	       (add-hook 'TeX-after-compilation-finished-functions 'TeX-revert-document-buffer))

  (use-package company-auctex
	       :after (auctex company)
	       :config (company-auctex-init))

  (use-package company-math
	       :after (auctex company))
#+END_SRC

*** BibTeX

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package bibtex
	       :after auctex
	       :hook (bibtex-mode . my/bibtex-fill-column)
	       :preface
	       (defun my/bibtex-fill-column ()
		 "Ensures that each entry does not exceed 120 characters."
		 (setq fill-column 120)))
#+END_SRC

*** TeX Engine (xetex)

#+BEGIN_SRC emacs-lisp :tangle yes
  (setq-default TeX-engine 'xetex)
#+END_SRC

*** reftex

Minor mode with distinct support for ~\label~, ~\ref~, and ~\cite~ in LaTeX.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package reftex
    :after auctex
    :custom
    (reftex-plug-into-AUCTeX t)
    (reftex-save-parse-info t)
    (reftex-use-multiple-selection-buffers t))
#+END_SRC
** Markdown

Before using this, make sure to install ~pandoc~.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package markdown-mode
    :ensure-system-package (pandoc . "trizen -S pandoc")
    :delight "μ "
    :mode ("\\.markdown\\'" "\\.md\\'")
    :custom (markdown-command "/usr/bin/pandoc"))

  (use-package markdown-preview-mode
    :after markdown-mode
    :custom
    (markdown-preview-javascript
     (list (concat "https://github.com/highlightjs/highlight.js/"
		   "9.15.6/highlight.min.js")
	   "<script>
	      $(document).on('mdContentChange', function() {
		$('pre code').each(function(i, block)  {
		  hljs.highlightBlock(block);
		});
	      });
	    </script>"))
    (markdown-preview-stylesheets
     (list (concat "https://cdnjs.cloudflare.com/ajax/libs/github-markdown-css/"
		   "3.0.1/github-markdown.min.css")
	   (concat "https://github.com/highlightjs/highlight.js/"
		   "9.15.6/styles/github.min.css")

	   "<style>
	      .markdown-body {
		box-sizing: border-box;
		min-width: 200px;
		max-width: 980px;
		margin: 0 auto;
		padding: 45px;
	      }

	      @media (max-width: 767px) { .markdown-body { padding: 15px; } }
	    </style>")))
#+END_SRC
* Packages
** aggressive-indent
#+begin_src emacs-lisp :tangle yes
  (use-package aggressive-indent
    :hook ((css-mode . aggressive-indent-mode)
           (emacs-lisp-mode . aggressive-indent-mode)
           (js-mode . aggressive-indent-mode)
           (lisp-mode . aggressive-indent-mode))
    :custom (aggressive-indent-comments-too))
#+end_src
** alert

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package alert
    :defer 1
    :custom (alert-default-style 'libnotify))
#+END_SRC

** autorevert
#+begin_src emacs-lisp :tangle yes
  (use-package autorevert
    :ensure nil
    :delight auto-revert-mode
    :bind ("C-x R" . revert-buffer)
    :custom (auto-revert-verbose nil)
    :config (global-auto-revert-mode 1))
#+end_src
** company (Auto-Completion)

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package company
    :defer 0.5
    :delight
    :custom
    (company-begin-commands '(self-insert-command))
    (company-idle-delay .1)
    (company-minimum-prefix-length 2)
    (company-show-numbers t)
    (company-tooltip-align-annotations 't)
    (global-company-mode t))

  (use-package company-box
    :after company
    :delight
    :hook (company-mode . company-box-mode))
#+END_SRC
** counsel

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package counsel
    :after ivy
    :delight
    :bind (("C-x C-d" . counsel-dired-jump)
           ("C-x C-h" . counsel-minibuffer-history)
           ("C-x C-l" . counsel-find-library)
           ("C-x C-r" . counsel-recentf)
           ("C-x C-u" . counsel-unicode-char)
           ("C-x C-v" . counsel-set-variable))
    :config (counsel-mode)
    :custom (counsel-rg-base-command "rg -S -M 150 --no-heading --line-number --color never %s"))
#+END_SRC

** counsel-projectile
#+begin_src emacs-lisp :tangle yes
  (use-package counsel-projectile
    :after (counsel projectile)
    :config (counsel-projectile-mode 1))
#+end_src
** editorconfig
#+begin_src emacs-lisp :tangle yes
  (use-package editorconfig
    :defer 0.3
    :config (editorconfig-mode 1))
#+end_src
** electric-operator
Automatically add spacing around operators.

#+begin_src emacs-lisp :tangle yes
  (use-package electric-operator
    :delight
    :hook (python-mode . electric-operator-mode))
#+end_src
** expand-region
Increase region by semantic units. It tries to be smart about it and adapt to
the structure of the current major mode.

#+begin_src emacs-lisp :tangle yes
  (use-package expand-region
    :bind (("C-+" . er/contract-region)
           ("C-=" . er/expand-region)))
#+end_src
** flycheck
#+begin_src emacs-lisp :tangle yes
  (use-package flycheck
    :defer 2
    :delight
    :init (global-flycheck-mode)
    :custom
    (flycheck-display-errors-delay .3)
    (flycheck-pylintrc "~/.pylintrc")
    (flycheck-python-pylint-executable "/usr/bin/pylint")
    (flycheck-stylelintrc "~/.stylelintrc.json")
    :config
    (flycheck-add-mode 'javascript-eslint 'web-mode)
    (flycheck-add-mode 'typescript-tslint 'web-mode))
#+end_src
** git-commit
#+begin_src emacs-lisp :tangle yes
  (use-package git-commit
    :after magit
    :hook (git-commit-mode . my/git-commit-auto-fill-everywhere)
    :custom (git-commit-summary-max-length 50)
    :preface
    (defun my/git-commit-auto-fill-everywhere ()
      "Ensures that the commit body does not exceed 72 characters."
      (setq fill-column 72)
      (setq-local comment-auto-fill-only-comments nil)))
#+end_src
** git-gutter
#+begin_src emacs-lisp :tangle yes
  (use-package git-gutter
    :defer 0.3
    :delight
    :init (global-git-gutter-mode +1))
#+end_src
** git-timemachine
#+begin_src emacs-lisp :tangle yes
  (use-package git-timemachine
    :defer 1
    :delight)
#+end_src
** hydra
Hydra allows me to display a list of all the commands implemented in the echo
area and easily interact with them.

#+begin_src emacs-lisp :tangle yes
  (use-package hydra
    :bind (("C-c I" . hydra-image/body)
           ("C-c L" . hydra-ledger/body)
           ("C-c M" . hydra-merge/body)
           ("C-c T" . hydra-tool/body)
           ("C-c b" . hydra-btoggle/body)
           ("C-c c" . hydra-clock/body)
           ("C-c e" . hydra-erc/body)
           ("C-c f" . hydra-flycheck/body)
           ("C-c g" . hydra-go-to-file/body)
           ("C-c m" . hydra-magit/body)
           ("C-c o" . hydra-org/body)
           ("C-c p" . hydra-projectile/body)
           ("C-c q" . hydra-query/body)
           ("C-c s" . hydra-spelling/body)
           ("C-c t" . hydra-tex/body)
           ("C-c u" . hydra-upload/body)
           ("C-c w" . hydra-windows/body)))

  (use-package major-mode-hydra
    :after hydra
    :preface
    (defun with-alltheicon (icon str &optional height v-adjust)
      "Displays an icon from all-the-icon."
      (s-concat (all-the-icons-alltheicon icon :v-adjust (or v-adjust 0) :height (or height 1)) " " str))

    (defun with-faicon (icon str &optional height v-adjust)
      "Displays an icon from Font Awesome icon."
      (s-concat (all-the-icons-faicon icon :v-adjust (or v-adjust 0) :height (or height 1)) " " str))

    (defun with-fileicon (icon str &optional height v-adjust)
      "Displays an icon from the Atom File Icons package."
      (s-concat (all-the-icons-fileicon icon :v-adjust (or v-adjust 0) :height (or height 1)) " " str))

    (defun with-octicon (icon str &optional height v-adjust)
      "Displays an icon from the GitHub Octicons."
      (s-concat (all-the-icons-octicon icon :v-adjust (or v-adjust 0) :height (or height 1)) " " str)))
#+end_src
*** hydra-btoggle

Group a lot of commands

#+begin_src emacs-lisp :tangle yes
  (pretty-hydra-define hydra-btoggle
    (:hint nil :color amaranth :quit-key "q" :title (with-faicon "toggle-on" "Toggle" 1 -0.05))
    ("Basic"
     (("a" abbrev-mode "abbrev" :toggle t)
      ("h" global-hungry-delete-mode "hungry delete" :toggle t))
     "Coding"
     (("e" electric-operator-mode "electric operator" :toggle t)
      ("F" flyspell-mode "flyspell" :toggle t)
      ("f" flycheck-mode "flycheck" :toggle t)
      ("l" lsp-mode "lsp" :toggle t)
      ("s" smartparens-mode "smartparens" :toggle t))
     "UI"
     (("i" ivy-rich-mode "ivy-rich" :toggle t))))
#+end_src

*** hydra-flycheck
#+begin_src emacs-lisp :tangle yes
  (pretty-hydra-define hydra-flycheck
    (:hint nil :color teal :quit-key "q" :title (with-faicon "plane" "Flycheck" 1 -0.05))
    ("Checker"
     (("?" flycheck-describe-checker "describe")
      ("d" flycheck-disable-checker "disable")
      ("m" flycheck-mode "mode")
      ("s" flycheck-select-checker "select"))
     "Errors"
     (("<" flycheck-previous-error "previous" :color pink)
      (">" flycheck-next-error "next" :color pink)
      ("f" flycheck-buffer "check")
      ("l" flycheck-list-errors "list"))
     "Other"
     (("M" flycheck-manual "manual")
      ("v" flycheck-verify-setup "verify setup"))))
#+end_src
*** hydra-magit
#+begin_src emacs-lisp :tangle yes
  (pretty-hydra-define hydra-magit
    (:hint nil :color teal :quit-key "q" :title (with-alltheicon "git" "Magit" 1 -0.05))
    ("Action"
     (("b" magit-blame "blame")
      ("c" magit-clone "clone")
      ("i" magit-init "init")
      ("l" magit-log-buffer-file "commit log (current file)")
      ("L" magit-log-current "commit log (project)")
      ("s" magit-status "status"))))
#+end_src
*** hydra-merge
#+begin_src emacs-lisp :tangle yes
  (pretty-hydra-define hydra-merge
    (:hint nil :color pink :quit-key "q" :title (with-alltheicon "git" "Merge" 1 -0.05))
    ("Move"
     (("n" smerge-next "next")
      ("p" smerge-prev "previous"))
     "Keep"
     (("RET" smerge-keep-current "current")
      ("a" smerge-keep-all "all")
      ("b" smerge-keep-base "base")
      ("l" smerge-keep-lower "lower")
      ("u" smerge-keep-upper "upper"))
     "Diff"
     (("<" smerge-diff-base-upper "upper/base")
      ("=" smerge-diff-upper-lower "upper/lower")
      (">" smerge-diff-base-lower "base/lower")
      ("R" smerge-refine "redefine")
      ("E" smerge-ediff "ediff"))
     "Other"
     (("C" smerge-combine-with-next "combine")
      ("r" smerge-resolve "resolve")
      ("k" smerge-kill-current "kill current"))))
#+end_src
*** hydra-projectile

#+begin_src emacs-lisp :tangle yes
  (pretty-hydra-define hydra-projectile
    (:hint nil :color teal :quit-key "q" :title (with-faicon "rocket" "Projectile" 1 -0.05))
    ("Buffers"
     (("b" counsel-projectile-switch-to-buffer "list")
      ("k" projectile-kill-buffers "kill all")
      ("S" projectile-save-project-buffers "save all"))
     "Find"
     (("d" counsel-projectile-find-dir "directory")
      ("D" projectile-dired "root")
      ("f" counsel-projectile-find-file "file")
      ("p" counsel-projectile-switch-project "project"))
     "Other"
     (("i" projectile-invalidate-cache "reset cache"))
     "Search"
     (("r" projectile-replace "replace")
      ("R" projectile-replace-regexp "regexp replace")
      ("s" counsel-rg "search"))))
#+end_src
*** hydra-tex

#+begin_src emacs-lisp :tangle yes
  (pretty-hydra-define hydra-tex
    (:hint nil :color teal :quit-key "q" :title (with-fileicon "tex" "LaTeX" 1 -0.05))
    ("Action"
     (("g" reftex-goto-label "goto")
      ("r" reftex-query-replace-document "replace")
      ("s" counsel-rg "search")
      ("t" reftex-toc "table of content"))))
#+end_src
*** hydra-windows
#+begin_src emacs-lisp :tangle yes
  (pretty-hydra-define hydra-windows
    (:hint nil :forein-keys warn :quit-key "q" :title (with-faicon "windows" "Windows" 1 -0.05))
    ("Window"
     (("b" balance-windows "balance")
      ("i" enlarge-window "heighten")
      ("j" shrink-window-horizontally "narrow")
      ("k" shrink-window "lower")
      ("l" enlarge-window-horizontally "widen")
      ("s" switch-window-then-swap-buffer "swap" :color teal))
     "Zoom"
     (("-" text-scale-decrease "out")
      ("+" text-scale-increase "in")
      ("=" (text-scale-increase 0) "reset"))))
#+end_src
** ibuffer
#+begin_src emacs-lisp :tangle yes
  (use-package ibuffer
    :bind ("C-x C-b" . ibuffer))
#+end_src
** ibuffer-projectile
#+begin_src emacs-lisp :tangle yes
  (use-package ibuffer-projectile
    :after ibuffer
    :preface
    (defun my/ibuffer-projectile ()
      (ibuffer-projectile-set-filter-groups)
      (unless (eq ibuffer-sorting-mode 'alphabetic)
        (ibuffer-do-sort-by-alphabetic)))
    :hook (ibuffer . my/ibuffer-projectile))
#+end_src
** imenu (tag navigation)
#+begin_src emacs-lisp :tangle yes
  (use-package imenu
    :ensure nil
    :bind ("C-r" . imenu))
#+end_src
** ivy

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package ivy
    :delight
    :after ivy-rich
    :bind (("C-x b" . ivy-switch-buffer)
           ("C-x B" . ivy-switch-buffer-other-window)
           ("M-H" . ivy-resume)
           :map ivy-minibuffer-map
           ("<tab>" . ivy-alt-done)
           ("C-i" . ivy-partial-or-done)
           ("S-SPC" . nil)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-switch-buffer-kill))
    :custom
    (ivy-case-fold-search-default t)
    (ivy-count-format "(%d/%d) ")
    (ivy-re-builders-alist '((t . ivy--regex-plus)))
    (ivy-use-virtual-buffers t)
    :config (ivy-mode))

  (use-package all-the-icons-ivy
    :after (all-the-icons ivy)
    :custom (all-the-icons-ivy-buffer-commands '(ivy-switch-buffer-other-window))
    :config
    (add-to-list 'all-the-icons-ivy-file-commands 'counsel-dired-jump)
    (add-to-list 'all-the-icons-ivy-file-commands 'counsel-find-library)
    (all-the-icons-ivy-setup))

  (use-package swiper
    :after ivy
    :bind (("C-s" . swiper)
           :map swiper-map
           ("M-%" . swiper-query-replace)))

  (use-package ivy-pass
    :after ivy--actions-list
    :commands ivy-pass)
#+END_SRC

** ivy-rich

#+BEGIN_SRC emacs-lisp :tangle yes

  (use-package ivy-rich
    :defer 0.1
    :preface
    (defun ivy-rich-branch-candidate (candidate)
      "Displays the branch candidate of the candidate for ivy-rich."
      (let ((candidate (expand-file-name candidate ivy--directory)))
        (if (or (not (file-exists-p candidate)) (file-remote-p candidate))
            ""
          (format "%s%s"
                  (propertize
                   (replace-regexp-in-string abbreviated-home-dir "~/"
                                             (file-name-directory
                                              (directory-file-name candidate)))
                   'face 'font-lock-doc-face)
                  (propertize
                   (file-name-nondirectory
                    (directory-file-name candidate))
                   'face 'success)))))

    (defun ivy-rich-compiling (candidate)
      "Displays compiling buffers of the candidate for ivy-rich."
      (let* ((candidate (expand-file-name candidate ivy--directory)))
        (if (or (not (file-exists-p candidate)) (file-remote-p candidate)
                (not (magit-git-repo-p candidate)))
            ""
          (if (my/projectile-compilation-buffers candidate)
              "compiling"
            ""))))

    (defun ivy-rich-file-group (candidate)
      "Displays the file group of the candidate for ivy-rich"
      (let ((candidate (expand-file-name candidate ivy--directory)))
        (if (or (not (file-exists-p candidate)) (file-remote-p candidate))
            ""
          (let* ((group-id (file-attribute-group-id (file-attributes candidate)))
                 (group-function (if (fboundp #'group-name) #'group-name #'identity))
                 (group-name (funcall group-function group-id)))
            (format "%s" group-name)))))

    (defun ivy-rich-file-modes (candidate)
      "Displays the file mode of the candidate for ivy-rich."
      (let ((candidate (expand-file-name candidate ivy--directory)))
        (if (or (not (file-exists-p candidate)) (file-remote-p candidate))
            ""
          (format "%s" (file-attribute-modes (file-attributes candidate))))))

    (defun ivy-rich-file-size (candidate)
      "Displays the file size of the candidate for ivy-rich."
      (let ((candidate (expand-file-name candidate ivy--directory)))
        (if (or (not (file-exists-p candidate)) (file-remote-p candidate))
            ""
          (let ((size (file-attribute-size (file-attributes candidate))))
            (cond
             ((> size 1000000) (format "%.1fM " (/ size 1000000.0)))
             ((> size 1000) (format "%.1fk " (/ size 1000.0)))
             (t (format "%d " size)))))))

    (defun ivy-rich-file-user (candidate)
      "Displays the file user of the candidate for ivy-rich."
      (let ((candidate (expand-file-name candidate ivy--directory)))
        (if (or (not (file-exists-p candidate)) (file-remote-p candidate))
            ""
          (let* ((user-id (file-attribute-user-id (file-attributes candidate)))
                 (user-name (user-login-name user-id)))
            (format "%s" user-name)))))

    (defun ivy-rich-switch-buffer-icon (candidate)
      "Returns an icon for the candidate out of `all-the-icons'."
      (with-current-buffer
          (get-buffer candidate)
        (let ((icon (all-the-icons-icon-for-mode major-mode :height 0.9)))
          (if (symbolp icon)
              (all-the-icons-icon-for-mode 'fundamental-mode :height 0.9)
            icon))))
    :config
    (plist-put ivy-rich-display-transformers-list
               'counsel-find-file
               '(:columns
                 ((ivy-rich-candidate               (:width 73))
                  (ivy-rich-file-user               (:width 8 :face font-lock-doc-face))
                  (ivy-rich-file-group              (:width 4 :face font-lock-doc-face))
                  (ivy-rich-file-modes              (:width 11 :face font-lock-doc-face))
                  (ivy-rich-file-size               (:width 7 :face font-lock-doc-face))
                  (ivy-rich-file-last-modified-time (:width 30 :face font-lock-doc-face)))))
    (plist-put ivy-rich-display-transformers-list
               'counsel-projectile-switch-project
               '(:columns
                 ((ivy-rich-branch-candidate        (:width 80))
                  (ivy-rich-compiling))))
    (plist-put ivy-rich-display-transformers-list
               'ivy-switch-buffer
               '(:columns
                 ((ivy-rich-switch-buffer-icon       (:width 2))
                  (ivy-rich-candidate                (:width 40))
                  (ivy-rich-switch-buffer-size       (:width 7))
                  (ivy-rich-switch-buffer-indicators (:width 4 :face error :align right))
                  (ivy-rich-switch-buffer-major-mode (:width 20 :face warning)))
                 :predicate (lambda (cand) (get-buffer cand))))
    (ivy-rich-mode 1))
#+END_SRC

** lorem-ipsum
#+begin_src emacs-lisp :tangle yes
  (use-package lorem-ipsum
    :bind (("C-c C-v l" . lorem-ipsum-insert-list)
           ("C-c C-v p" . lorem-ipsum-insert-paragraphs)
           ("C-c C-v s" . lorem-ipsum-insert-sentences)))
#+end_src
** magit
#+begin_src emacs-lisp :tangle yes
  (use-package magit
    :defer 0.3)
#+end_src
** move-text
Moves the current line (or if marked, the current region).

#+begin_src emacs-lisp :tangle yes
  (use-package move-text
    :bind (("M-p" . move-text-up)
           ("M-n" . move-text-down))
    :config (move-text-default-bindings))
#+end_src
** paradox
#+begin_src emacs-lisp :tangle yes
  (use-package paradox
    :defer 1
    :custom
    (paradox-column-width-package 27)
    (paradox-column-width-version 13)
    (paradox-execute-asynchronously t)
    (paradox-hide-wiki-packages t)
    :config
    (paradox-enable)
    (remove-hook 'paradox-after-execute-functions #'paradox--report-buffer-print))
#+end_src
** pdf-tools
#+begin_quote
PDF Tools is, among other things, a replacement of DocView for PDF files. The
key difference is that pages are not pre-rendered by e.g. ghostscript and stored
in the file-system, but rather created on-demand and stored in memory.
#+end_quote

#+begin_src emacs-lisp :tangle yes
  (use-package pdf-tools
    :defer 1
    :magic ("%PDF" . pdf-view-mode)
    :init (pdf-tools-install :no-query))

  (use-package pdf-view
    :ensure nil
    :after pdf-tools
    :bind (:map pdf-view-mode-map
                ("C-s" . isearch-forward)
                ("d" . pdf-annot-delete)
                ("h" . pdf-annot-add-highlight-markup-annotation)
                ("t" . pdf-annot-add-text-annotation))
    :custom
    (pdf-view-display-size 'fit-page)
    (pdf-view-resize-factor 1.1)
    (pdf-view-use-unicode-ligther nil))
#+end_src
** projectile
#+begin_src emacs-lisp :tangle yes
  (use-package projectile
    :defer 1
    :preface
    (defun my/projectile-compilation-buffers (&optional project)
      "Get a list of a project's compilation buffers.
    If PROJECT is not specified the command acts on the current project."
      (let* ((project-root (or project (projectile-project-root)))
             (buffer-list (mapcar #'process-buffer compilation-in-progress))
             (all-buffers (cl-remove-if-not
                           (lambda (buffer)
                             (projectile-project-buffer-p buffer project-root))
                           buffer-list)))
        (if projectile-buffers-filter-function
            (funcall projectile-buffers-filter-function all-buffers)
          all-buffers)))
    :custom
    (projectile-cache-file (expand-file-name "projectile.cache" xdg-cache))
    (projectile-completion-system 'ivy)
    (projectile-enable-caching t)
    (projectile-keymap-prefix (kbd "C-c C-p"))
    (projectile-known-projects-file (expand-file-name "projectile-bookmarks.eld" xdg-cache))
    (projectile-mode-line '(:eval (projectile-project-name)))
    :config (projectile-global-mode))
#+end_src
** rainbow-mode
#+begin_src emacs-lisp :tangle yes
  (use-package rainbow-mode
    :delight
    :hook (prog-mode))
#+end_src
** rainbow-delimiters
#+begin_src emacs-lisp :tangle yes
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src
** recentf
#+begin_src emacs-lisp :tangle yes
  (use-package recentf
    :bind ("C-c r" . recentf-open-files)
    :init (recentf-mode)
    :custom
    (recentf-exclude (list "COMMIT_EDITMSG"
                           "~$"
                           "/scp:"
                           "/ssh:"
                           "/sudo:"
                           "/tmp/"))
    (recentf-max-menu-items 15)
    (recentf-max-saved-items 200)
    (recentf-save-file (expand-file-name "recentf" user-emacs-directory)))
    :config (run-at-time nil (* 5 60) 'recentf-save-list))
#+end_src
** savehist
#+BEGIN_SRC emacs-lisp :tangle yes>
  (use-package savehist
    :ensure nil
    :custom
    (history-delete-duplicates t)
    (history-length t)
    (savehist-additional-variables '(kill-ring search-ring regexp-search-ring))
    (savehist-save-minibuffer-history 1)
    :config (savehist-mode 1))
#+END_SRC
** smartparens
#+begin_src emacs-lisp :tangle yes
  (use-package smartparens
    :defer 1
    :delight
    :custom  (sp-escape-quotes-after-insert nil)
    :config (smartparens-global-mode 1))
#+end_src
** smerge-mode
#+begin_src emacs-lisp :tangle yes
  (use-package smerge-mode
    :after hydra
    :hook (magit-diff-visit-file . (lambda ()
                                     (when smerge-mode (hydra-merge/body)))))
#+end_src
** undo-tree
#+begin_src emacs-lisp :tangle yes
  (use-package undo-tree
    :delight
    :bind ("C--" . undo-tree-redo)
    :init (global-undo-tree-mode)
    :custom
    (undo-tree-visualizer-timestamps t)
    (undo-tree-visualizer-diff t))
#+end_src
** which-key
#+begin_src emacs-lisp :tangle yes
  (use-package which-key
    :defer 0.2
    :delight
    :config (which-key-mode))
#+end_src
** yasnippet

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package yasnippet
    :delight yas-minor-mode " υ"
    :preface
    (defun my/disable-yas-if-no-snippets ()
      (when (and yas-minor-mode (null (yas--get-snippet-tables)))
        (yas-minor-mode -1)))
    :hook (yas-minor-mode . my/disable-yas-if-no-snippets)
    :config (yas-global-mode))


  (use-package yasnippet-snippets
    :after yasnippet
    :config (yasnippet-snippets-initialize))

  (use-package ivy-yasnippet :after yasnippet)
  (use-package react-snippets :after yasnippet)
#+END_SRC

* Org-Mode
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package org
	       :ensure org-plus-contrib
	       :delight "Θ "
	       :bind ("C-c i" . org-insert-structure-template)
		   :config
           (add-to-list 'org-structure-template-alist
		       '("el" . "emacs-lisp :tangle yes")))
#+END_SRC
